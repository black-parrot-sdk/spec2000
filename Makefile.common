BENCHMARK_DIR = $(CURDIR)/spec2000/benchmarks/spec2000/$(SUITE)/$(BENCHMARK)
MKLFS = dramfs_mklfs

comma:= ,
empty:=
space:= $(empty) $(empty)

vpath %.c $(BENCHMARK_DIR)/src.raw
vpath %.f $(BENCHMARK_DIR)/src.raw
vpath %.c ./rawlib
vpath %.S ./initlib
vpath %.c ./initlib

comma:= ,
empty:=
space:= $(empty) $(empty)

RISCV_GCC       = $(CROSS_COMPILE)gcc -std=gnu89
RISCV_GCC_OPTS  = -O2 -mabi=lp64d -march=rv64gc -mcmodel=medany -mstrict-align -fcommon -I$(BP_SDK_INCLUDE_DIR)
RISCV_GCC_OPTS += -Wno-implicit-function-declaration -Wno-implicit-int -Wno-return-mismatch
RISCV_GCC_OPTS += -Irawlib $(BENCHMARK_DEFS)
RISCV_GCC_OPTS += -D__init_argc=$(words $(ARGV)) -D__init_argv=\"$(subst $(space),\"$(comma)\",$(strip $(ARGV)))\"
RISCV_LINK_OPTS = -static -lgfortran -lm --specs=dramfs.specs --specs=perch.specs

OBJECT_FILES = lfs.o extra_init.o raw.o $(BENCHMARK_OBJS)

SRC_EXT = S c f

define compile_rule
%.o: %.$1
	$$(RISCV_GCC) -o $$@ -c $$< $$(RISCV_GCC_OPTS)
endef

$(BENCHMARK).riscv: $(OBJECT_FILES)
	$(RISCV_GCC) -o $@ $^ $(RISCV_LINK_OPTS)

$(foreach EXT,$(SRC_EXT),$(eval $(call compile_rule,$(EXT))))

lfs.c: $(BENCHMARK_INPS)
	$(MKLFS) $(LFS_BLOCK_SIZE) $(LFS_BLOCK_COUNT) $^ > $@

clean:
	rm -rf lfs.c $(OBJECT_FILES) $(BENCHMARK_INPS)
