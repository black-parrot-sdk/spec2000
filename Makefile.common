TOP          ?= $(shell git rev-parse --show-toplevel)
BP_SDK_DIR   ?= $(TOP)/..
BENCHMARK_DIR = $(BP_SDK_DIR)/spec2000/spec2000/benchmarks/spec2000/$(SUITE)/$(BENCHMARK)
MKLFS = dramfs_mklfs

comma:= ,
empty:=
space:= $(empty) $(empty)

vpath %.c $(BENCHMARK_DIR)/src.raw
vpath %.h $(BENCHMARK_DIR)/src.raw
vpath %.c ./rawlib
vpath %.S ./initlib
vpath %.c ./initlib

comma:= ,
empty:=
space:= $(empty) $(empty)

RISCV_GCC       = $(CROSS_COMPILE)gcc
RISCV_GCC_OPTS  = -O2 -mabi=lp64 -march=rv64imafd -mcmodel=medany -mstrict-align -I$(BP_INCLUDE_DIR)
RISCV_GCC_OPTS += -Irawlib $(BENCHMARK_DEFS)
RISCV_GCC_OPTS += -D__init_argc=$(ARGC) -D__init_argv=\"$(subst $(space),\"$(comma)\",$(strip $(ARGV)))\"
RISCV_LINK_OPTS = -T $(BP_LINKER_DIR)/riscv.ld -L$(BP_LIB_DIR) -static -lm -Wl,--whole-archive -lperch -Wl,--no-whole-archive

OBJECT_FILES = lfs.o args.o raw.o $(BENCHMARK_OBJS)

SRC_EXT = S c

define compile_rule
%.o: %.$1
	$$(RISCV_GCC) -o $$@ -c $$< $$(RISCV_GCC_OPTS)
endef

$(BENCHMARK).riscv: $(OBJECT_FILES)
	$(RISCV_GCC) -o $@ $^ $(RISCV_LINK_OPTS)

$(foreach EXT,$(SRC_EXT),$(eval $(call compile_rule,$(EXT))))

lfs.c: $(BENCHMARK_INPS)
	$(MKLFS) $(LFS_BLOCK_SIZE) $(LFS_BLOCK_COUNT) $^ > $@

clean:
	rm -rf lfs.c $(OBJECT_FILES) $(BENCHMARK_INPS)
